# -*- coding: utf-8 -*-
"""ProcessData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f42a5czi8kAVHJDiDvnhTdfBAvuXJ3sU

!pip install --upgrade pip
!pip install dipy
!pip install fury
!pip install numpy
!pip install matplotlib
!pip install pillow
!pip install scipy
!pip install torch
"""
import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage.morphology import binary_dilation

from dipy.core.gradients import gradient_table
from dipy.data import get_fnames
from dipy.io.gradients import read_bvals_bvecs
from dipy.io.image import load_nifti_data, load_nifti, save_nifti
from dipy.direction import peaks
from dipy.reconst import shm
from dipy.tracking import utils
from dipy.tracking.local_tracking import LocalTracking
from dipy.tracking.stopping_criterion import BinaryStoppingCriterion
from dipy.tracking.streamline import Streamlines


hardi_fname, hardi_bval_fname, hardi_bvec_fname = get_fnames('stanford_hardi')
label_fname = get_fnames('stanford_labels')
t1_fname = get_fnames('stanford_t1')

data, affine, hardi_img = load_nifti(hardi_fname, return_img=True)
labels = load_nifti_data(label_fname)
t1_data = load_nifti_data(t1_fname)
bvals, bvecs = read_bvals_bvecs(hardi_bval_fname, hardi_bvec_fname)
gtab = gradient_table(bvals, bvecs)

white_matter = binary_dilation((labels == 1) | (labels == 2))
csamodel = shm.CsaOdfModel(gtab, 6)
csapeaks = peaks.peaks_from_model(model=csamodel,
                                  data=data,
                                  sphere=peaks.default_sphere,
                                  relative_peak_threshold=.8,
                                  min_separation_angle=45,
                                  mask=white_matter)

affine = np.eye(4)
seeds = utils.seeds_from_mask(white_matter, affine, density=1)
stopping_criterion = BinaryStoppingCriterion(white_matter)

streamline_generator = LocalTracking(csapeaks, stopping_criterion, seeds,
                                     affine=affine, step_size=0.5)
streamlines = Streamlines(streamline_generator)

cc_slice = labels == 2
cc_streamlines = utils.target(streamlines, affine, cc_slice)
cc_streamlines = Streamlines(cc_streamlines)


other_streamlines = utils.target(streamlines, affine, cc_slice,
                                 include=False)
other_streamlines = Streamlines(other_streamlines)

assert len(other_streamlines) + len(cc_streamlines) == len(streamlines)

from dipy.viz import window, actor, ui, colormap as cmap

print("Started")
# Enables/disables interactive visualization
interactive = True

# Make display objects
color = cmap.line_colors(cc_streamlines)
print("Finished line_colors. Started cc_streamlines")
cc_streamlines_actor = actor.line(cc_streamlines, color)
print("Finished cc_streamlines. Started cc_ROI_streamlines")
cc_ROI_actor = actor.contour_from_roi(cc_slice, color=(1., 1., 0.),
                                      opacity=0.5)
print("Finished cc_ROI_streamlines")

vol_actor = actor.slicer(t1_data)

vol_actor.display(x=40)
vol_actor2 = vol_actor.copy()
vol_actor2.display(z=35)

print("Finished Volume Slicer")

# Add display objects to canvas
print("Starting Visualization")
r = window.Scene()

print("Initialized Window Renderer")
r.add(vol_actor)
r.add(vol_actor2)
r.add(cc_streamlines_actor)
r.add(cc_ROI_actor)
print("Added Window Actors")

window.snapshot(r, size=(800, 800), fname='corpuscallosum_axial.png', offscreen = False)

# Save figures
#window.record(r, size=(800, 800), path='corpuscallosum_axial.png',)

r.set_camera(position=[-1, 0, 0], focal_point=[0, 0, 0], view_up=[0, 0, 1])
window.record(r, out_path='corpuscallosum_sagittal.png', size=(800, 800))

M, grouping = utils.connectivity_matrix(cc_streamlines, affine,
                                        labels.astype(np.uint8),
                                        return_mapping=True,
                                        mapping_as_streamlines=True)
M[:3, :] = 0
M[:, :3] = 0

plt.imshow(np.log1p(M), interpolation='nearest')
plt.savefig("connectivity.png")

